// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;
pragma experimental ABIEncoderV2;

// struct MalwareIDToPattern{ string ind_pat_val; } string key = _ind_id - value = the structure. mapping id to pattern - can retrieve data using the id 
// mapping (string => MalwareIDToPattern) contentIDs;
contract MalwareStorage {
    
    string[] public malwareIDs;
    string[] public contentIDs;

    struct MalwareID{
        string stixID;
        string mal_name;
    }
    struct DataLocation{
        string contentID;
        string stixID;    
    }
    
    //QUERY THE DATA   string key = malware, ID (ipv4,file hash, url etc) value = Malware for that pattern.  
    mapping (string => MalwareID) malware_list;
     
    //TIE THE ID TO THE CONTENT address mal_id - value = contentID. 
    mapping(string=> DataLocation) data_locations;
    
    
    function setMalware(string memory _contentID, string memory _stixID, string memory _mal_name) public {
            
        MalwareID storage malware = malware_list[_mal_name];
        malware.stixID= _stixID;
        malware.mal_name = _mal_name;
        malwareIDs.push(_stixID);
            
        DataLocation storage content = data_locations[_stixID];       
        content.contentID= _contentID;
        content.stixID = _stixID;
        contentIDs.push(_contentID);
    }
      
    function getContentIDs() view public returns(string[] memory){
        return contentIDs;
    }         
    
    function getMalwares() view public returns(string[] memory){
        return malwareIDs;
    }
    
    function getContentID(string memory _stixID) view public returns(string memory){
        return data_locations[_stixID].contentID;
    }         
    
    function getMalware(string memory _mal_name) view public returns (string memory){
        return malware_list[_mal_name].stixID;

    }



}