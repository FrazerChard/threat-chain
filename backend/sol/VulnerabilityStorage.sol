// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;
pragma experimental ABIEncoderV2;

// struct VulnerabilityIDToPattern{ string ind_pat_val; } string key = _ind_id - value = the structure. mapping id to pattern - can retrieve data using the id 
// mapping (string => VulnerabilityIDToPattern) contentIDs;
contract VulnerabilityStorage {
    
    string[] public vulnerabilityIDs;
    string[] public contentIDs;

    struct VulnerabilityID{
        string stixID;
        string vulnName;
    }
    struct DataLocation{
        string contentID;
        string stixID;    
    }
    
    //QUERY THE DATA   string key = vulnerability, ID (ipv4,file hash, url etc) value = Vulnerability for that pattern.  
    mapping (string => VulnerabilityID) vulnerability_list;
     
    //TIE THE ID TO THE CONTENT address ind_id - value = contentID. 
    mapping(string=> DataLocation) data_locations;
    
    
    function setVulnerability(string memory _contentID, string memory _stixID, string memory _vulnName) public {
        VulnerabilityID storage vulnerability = vulnerability_list[_vulnName];
        vulnerability.stixID= _stixID;
        vulnerability.vulnName = _vulnName;
        vulnerabilityIDs.push(_stixID);
            
        DataLocation storage content = data_locations[_stixID];       
        content.contentID= _contentID;
        content.stixID = _stixID;
        contentIDs.push(_contentID);
    }
      
  function getContentIDs() view public returns(string[] memory){
      return contentIDs;
  }         
  
  function getVulnerabilitys() view public returns(string[] memory){
      return vulnerabilityIDs;
  }
  
  function getContentID(string memory _stixID) view public returns(string memory){
      return data_locations[_stixID].contentID;
  }         
  
  function getVulnerability(string memory _vulnName) view public returns (string memory){
      return vulnerability_list[_vulnName].stixID;

  }



}