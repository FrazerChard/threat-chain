import json
import datetime
import object_vocab as ov
from web3 import Web3
from app_authentication import web3, ipfs_cli
from stix2 import (Malware, parse)

#Getting data from a smart contract
#ABI from Remix
abi = json.loads('[{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"contentIDs","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_stixID","type":"string"}],"name":"getContentID","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getContentIDs","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_mal_name","type":"string"}],"name":"getMalware","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMalwares","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"malwareIDs","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_contentID","type":"string"},{"internalType":"string","name":"_stixID","type":"string"},{"internalType":"string","name":"_mal_name","type":"string"}],"name":"setMalware","outputs":[],"stateMutability":"nonpayable","type":"function"}]')
#Address from Remix once deployed
malware_address = "0xFe0602D820f42800E3EF3f89e1C39Cd15f78D283"
#Sets the contract to a variable
malware_contract = web3.eth.contract(address=malware_address, abi=abi)



def isMalwareFamily():
    family_or_instance = input("\n1: malware family \n2: malware instance\nfamily or instance: ")
    if int(family_or_instance) == 1:
        is_family = True
        
    else:
        is_family = False
    return is_family

def enumerateCapabilities():
    mal_capabilities=[]
    num_of_malcap = input("\nnumber of malware capabilities: ")

    if int(num_of_malcap) != 0:
        for i in range(int(num_of_malcap)):
            malcap = ov.malwareCapabilities()
            mal_capabilities.append(malcap)
        return mal_capabilities
    else:
        print("\nCANNOT BE EMPTY\n")
        enumerateCapabilities()

def uploadMalware():
          
    malwareSTIX = Malware(
        name=input("\nmalware name: "),
        description= input("malware description: "),
        malware_types=ov.malwareTypeVocab(),
        is_family=isMalwareFamily(),
        kill_chain_phases= ov.enumerateKCP(),
        capabilities = enumerateCapabilities()
        )

    print(type(malwareSTIX), "\n\n" , malwareSTIX)
    
    confirm = input("Is this data correct? (y/n): ")
    if (confirm.upper() == "Y"):
        #converts the STIX object into a JSON object
        malware = json.loads(str(malwareSTIX))
        #uploads json object to IPFS and records the content address
        contentAddr = ipfs_cli.add_json(malware)
        print("ipfs content address: ", contentAddr)

        stixID = malware["id"]
        nameVal = malware["name"]

        tx_hash = malware_contract.functions.setMalware(contentAddr,stixID, nameVal).transact()
        tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
        blockNum = web3.eth.blockNumber
        #print("This is block:" , blockNum)
    else:
        uploadMalware()
    
def retrieveMalware():
    query = input("\n\nenter the malware name:\n")

    get_malware = malware_contract.functions.getMalware(query).call()
    get_content_id = malware_contract.functions.getContentID(get_malware).call()
    
    #print("\n\nmalware ID:", get_malware)
    #print("content ID:" , get_content_id, "\n")

    retrieved_malware = ipfs_cli.cat(get_content_id)
    #Retrieve event value and parse into stix object
    STIXm = parse(retrieved_malware)
    print("\n", type(STIXm), "\n", STIXm)
    return STIXm
  
  
