import json
import datetime
import object_vocab as ov
from web3 import Web3
from app_authentication import web3, ipfs_cli
from stix2 import (Vulnerability, parse)

#ABI from Remix
abi = json.loads('[{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"contentIDs","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_stixID","type":"string"}],"name":"getContentID","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getContentIDs","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_vulnName","type":"string"}],"name":"getVulnerability","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVulnerabilitys","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_contentID","type":"string"},{"internalType":"string","name":"_stixID","type":"string"},{"internalType":"string","name":"_vulnName","type":"string"}],"name":"setVulnerability","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"vulnerabilityIDs","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]')
#Address from Remix once deployed
vulnerability_address = "0x064f860b6683223b03b38252853D5d2C210Cce19"
#Sets an instance of the smart contract
vulnerability_contract = web3.eth.contract(address=vulnerability_address, abi=abi)

def uploadVulnerability():
   
    vulnerabilitySTIX = Vulnerability(
        #type ^ specified in class,  id - random uuid4 appended to type string, created=defined in object when created  spec_version=2.1(v used),, modified=vulnerability["created"], pattern_version=2.1(v used), valid_from=vulnerability["created"],        
        name=input("\nvulnerability name: "),
        description=input("vulnerability description: "),
        external_references=ov.externalReference(),
    )
    #STIX object
    print(type(vulnerabilitySTIX), "\n\n" , vulnerabilitySTIX)

    confirm = input("correct? (y/n): ")
    if (confirm.upper() == "Y"):
        #converts the STIX object into a JSON object
        vulnerability = json.loads(str(vulnerabilitySTIX))
        #uploads json object to IPFS and records the content address
        contentAddr = ipfs_cli.add_json(vulnerability)
        print("ipfs content address: ", contentAddr)

        stixID = vulnerability["id"]
        vulnName = vulnerability["name"]

        tx_hash = vulnerability_contract.functions.setVulnerability(contentAddr, stixID, vulnName).transact()
        tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
        blockNum = web3.eth.blockNumber
        #print("block: " , blockNum)
    else:
        uploadVulnerability()
    
def retrieveVulnerability(): 
    query = input("\n\nenter vulnerability name:\n")

    get_vulnerability = vulnerability_contract.functions.getVulnerability(query).call()
    get_content_id = vulnerability_contract.functions.getContentID(get_vulnerability).call()
    #print("\n\nvulnerability ID:", get_vulnerability)
    #print("content ID:" , get_content_id, "\n")

    retrieved_vulnerability = ipfs_cli.cat(get_content_id)
    #Retrieve event value and parse into stix object
    STIXv = parse(retrieved_vulnerability)
    print("\n", type(STIXv), "\n", STIXv)
    return STIXv

